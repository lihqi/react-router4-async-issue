{"version":3,"sources":["About.js","App.js","AsyncComponent.js","serviceWorker.js","index.js"],"names":["About","console","log","react_default","a","createElement","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","setState","HashRouter","Link","to","style","width","height","background","onClick","handleClick","bind","Route","exact","path","component","importComponent","__webpack_require__","e","then","_Component","AsyncComponent","props","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","_ref","wrap","_context","prev","next","sent","default","stop","apply","arguments","C","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAEqBA,8LAEbC,QAAQC,IAAI,4DAGZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BAPmBC,0CCuDpBC,cAnDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,MAAO,GAHDR,6EAMA,IACJQ,EAAUL,KAAKI,MAAfC,MACNL,KAAKM,SAAS,CACVD,MAAOA,EAAQ,qCAInB,OACIb,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEJjB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,UAAT,WAGRjB,EAAAC,EAAAC,cAAA,WAAMM,KAAKI,MAAMC,OACjBb,EAAAC,EAAAC,cAAA,OACIgB,MAAO,CACHC,MAAO,OACPC,OAAQ,OACRC,WAAY,OAEhBC,QAASd,KAAKe,YAAYC,KAAKhB,OANnC,KAUAR,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACIC,OAAK,EACLC,KAAK,IACLC,WC1CeC,ED0CW,kBACtBC,EAAAC,EAAA,GAAAC,KAAAF,EAAAN,KAAA,WC3C4B,SAAAS,GAEpD,SAAAC,EAAYC,GAAO,IAAA9B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACjB7B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAM2B,KAEDvB,MAAQ,CACXgB,UAAW,MAJIvB,EAFiC,OAAAC,OAAA8B,EAAA,EAAA9B,CAAA4B,EAAAD,GAAA3B,OAAA+B,EAAA,EAAA/B,CAAA4B,EAAA,EAAAI,IAAA,oBAAAC,MAAA,eAAAC,EAAAlC,OAAAmC,EAAA,EAAAnC,CAAAoC,EAAAzC,EAAA0C,KAAA,SAAAC,IAAA,IAAAC,EAAAjB,EAAA,OAAAc,EAAAzC,EAAA6C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAUbpB,IAVa,OAAAgB,EAAAE,EAAAG,KAUjCtB,EAViCiB,EAU1CM,QAER3C,KAAKM,SAAS,CACZc,UAAWA,IAbqC,wBAAAmB,EAAAK,SAAAR,EAAApC,SAAA,yBAAAgC,EAAAa,MAAA7C,KAAA8C,YAAA,KAAAhB,IAAA,SAAAC,MAAA,WAiBlD,IAAMgB,EAAI/C,KAAKI,MAAMgB,UACrB,OAAO2B,EAAIvD,EAAAC,EAAAC,cAACqD,EAAM/C,KAAK2B,OAAY,SAlBeD,EAAA,CACzB/B,gBD6CXH,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAW/B,MC9CrC,IAAwBgC,SDCrB1B,aEOEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.172f183f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class About extends Component {\r\n    componentDidMount(){\r\n        console.log('About componentDidMount')\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>About</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n// import Home from './Home'\nimport About from \"./About\";\nimport asyncComponent from \"./AsyncComponent\";\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        };\n    }\n    handleClick() {\n        let { count } = this.state;\n        this.setState({\n            count: count + 1\n        });\n    }\n    render() {\n        return (\n            <Router>\n                <div>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/about\">About</Link>\n                        </li>\n                    </ul>\n                    <div>{this.state.count}</div>\n                    <div\n                        style={{\n                            width: \"60px\",\n                            height: \"60px\",\n                            background: \"red\"\n                        }}\n                        onClick={this.handleClick.bind(this)}\n                    >\n                        +\n                    </div>\n                    <hr />\n\n                    <Route\n                        exact\n                        path=\"/\"\n                        component={asyncComponent(() =>\n                            import(/* webpackChunkName: \"Home\" */ \"./Home\")\n                        )}\n                    />\n                    <Route path=\"/about\" component={About} />\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","/**\r\n * 分块加载\r\n */\r\nimport React, { Component } from \"react\";\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncComponent extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: null\r\n      };\r\n    }\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n\r\n      this.setState({\r\n        component: component\r\n      });\r\n    }\r\n    render() {\r\n      const C = this.state.component;\r\n      return C ? <C {...this.props} /> : null;\r\n    }\r\n  }\r\n  return AsyncComponent;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}